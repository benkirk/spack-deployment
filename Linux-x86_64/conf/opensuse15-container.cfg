#----------------------------------------------------------------------------
# environment
#----------------------------------------------------------------------------

os_version="opensuse15"

# name to prefix spack environments with later.
spack_deployment="Leap-Testbed"

# installation base directory.
SPACK_BASE=/pv/sw/24.02 && mkdir -p ${SPACK_BASE} \
      || { echo "cannot mkdir -p ${SPACK_BASE}"; }

# path to where we want to layer environment 'views'
spack_view_path=${SPACK_BASE}/view

# path for lmod module installation
spack_lmod_root=${SPACK_BASE}/modules

# the system-provided compiler (/usr/bin/gcc), use this var later
# to enable portability & upgrades to different hosts
spack_system_compiler="gcc@7.5.0"

# (choice): the compiler we'd like to use to buidl the bulk of software
# that does not critically depend on the compiler 'stack' later. For example,
# things we want in 'Core' like git, gmake, autotools, etc...
spack_core_compiler="gcc@12.3.0"

# how many 'spack installs' to run concurrently in the background, along with a single foreground process.
# this is supposed to be safe and coordinated by lockfiles.  Set to too many and you can exhaust the
# machine's resourcces.
# set to 0 to disable and serialize the install process.
n_concurrent_installs=2

# where our spack clone is to live
spack_clone_path="/pv/repos/spack-v0.21.1-BSK"
# Git repo from which to clone
spack_git_repo="https://github.com/benkirk/spack.git"
spack_clone_command="git clone --branch v0.21.1-BSK -c feature.manyFiles=true ${spack_git_repo}"
#spack_git_repo="git@gitlab-fsl.jsc.nasa.gov:fsl-admin/spack_fsl.git"

# spack builds heavily leverage tmpdir.  Make sure there is adequate space,
# and we will clean up between phases.  This is a defensive measure
# implemented after filling up /tmp!!
export TMPDIR=/tmp-spack #&& rm -rf ${TMPDIR} && mkdir -p ${TMPDIR}
spack_build_stage_path=${TMPDIR}
#spack_build_stage_path=/dev/shm/${USER}-spack && rm -rf ${spack_build_stage_path} && mkdir -p ${spack_build_stage_path}

# path to cache source files.  Useful to have this outside our build trees
# so it survives rm -rf ...
spack_source_cache=/cache-spack/source/ && mkdir -p ${spack_source_cache}

# path to cache built packages.  this is completely optional, but can be used for creating tarballs
# of build packages to avoid recompilations
spack_build_cache=/cache-spack/binary/ && mkdir -p ${spack_build_cache}

# flags we want to pass to 'spack install'.  This allows us to do things like
# specify a cache, or not, once here instead of several times inside each ./spack_env_*.sh file.
spack_install_flags_no_cache="--deprecated --no-cache --yes-to-all"
spack_install_flags_allow_cache="--deprecated --no-check-signature --yes-to-all"
spack_install_flags=${spack_install_flags_no_cache}
#spack_install_flags=${spack_install_flags_allow_cache}
#----------------------------------------------------------------------------

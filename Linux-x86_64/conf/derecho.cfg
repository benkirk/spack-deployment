#----------------------------------------------------------------------------
# environment
#----------------------------------------------------------------------------

# Git repo from which to clone
spack_git_repo="-b releases/v0.19.2-BSK git@github.com:benkirk/spack.git"
#spack_git_repo="https://github.com/benkirk/spack.git"

# name to prefix spack environments with later.
spack_deployment="Derecho"

# installation base directory.
SPACK_BASE=/glade/work/${USER}/my_spack_playground/deploy && mkdir -p ${SPACK_BASE} \
      || { echo "cannot mkdir -p ${SPACK_BASE}"; }

# spack builds heavily leverage tmpdir.  Make sure there is adequate space,
# and we will clean up between phases.  This is a defensive measure
# implemented after filling up /tmp!!
#export TMPDIR=/dev/shm/${USER}_spack_tmp && rm -rf ${TMPDIR} && mkdir -p ${TMPDIR}
export TMPDIR=${SCRATCH}/pbs.${PBS_JOBID}/${USER}_spack_tmp && rm -rf ${TMPDIR} && mkdir -p ${TMPDIR}
spack_build_stage_path=${TMPDIR}/stage

# by default we will clone spack from github, then make a clone from that
# source tree.  This allows the possibility of fixing the spack source tree
# in the future
spack_clone_path_base=${SPACK_BASE}/spack #sw/base
spack_clone_path_deps=${SPACK_BASE}/spack #sw/base #deps
spack_clone_path=${spack_clone_path_base}

# path to where we want to layer environment 'views'
spack_view_path=${SPACK_BASE}/view

# path for lmod module installation
spack_lmod_root=${SPACK_BASE}/modules

# path to cache source files.  Useful to have this outside our build trees
# so it survives rm -rf ...
spack_source_cache=${CHEYENNE_SCRATCH}/spack_caches/source && mkdir -p ${spack_source_cache}

# path to cache built packages.  this is completely optional, but can be used for creating tarballs
# of build packages to avoid recompilations
spack_build_cache=${CHEYENNE_SCRATCH}/spack_caches/binary && mkdir -p ${spack_build_cache}

# the system-provided compiler (/usr/bin/gcc), use this var later
# to enable portability & upgrades to different hosts
spack_system_compiler="gcc@7.5.0"

# (choice): the compiler we'd like to use to build the bulk of software
# that does not critically depend on the compiler 'stack' later. For example,
# things we want in 'Core' like git, gmake, autotools, etc...
spack_core_compiler="gcc@11.3.0"

# how many 'spack installs' to run concurrently in the background, along with a single foreground process.
# this is supposed to be safe and coordinated by lockfiles.  Set to too many and you can exhaust the
# machine's resourcces.
# set to 0 to disable and serialize the install process.
n_concurrent_installs=4

# flags we want to pass to 'spack install'.  This allows us to do things like
# specify a cache, or not, once here instead of several times inside each ./spack_env_*.sh file.
spack_install_flags_no_cache="--deprecated --no-cache --yes-to-all"
spack_install_flags_allow_cache="--deprecated --no-check-signature --yes-to-all"
spack_install_flags=${spack_install_flags_no_cache}
#spack_install_flags=${spack_install_flags_allow_cache}
#----------------------------------------------------------------------------

export SPACK_PYTHON=/glade/u/apps/opt/conda/envs/npl/bin/python3
